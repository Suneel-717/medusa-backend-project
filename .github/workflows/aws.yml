name: Deploy Medusa Store to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t suneel717/medusa-store:latest .

      # Step 5: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push suneel717/medusa-store:latest

      # Step 6: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 7: Update ECS task definition with env vars
      - name: Register new ECS task definition with secrets
        id: update-task-def
        run: |
          EXISTING_TASK=$(aws ecs describe-task-definition \
            --task-definition medusa-task \
            --region us-east-1)

          NEW_TASK_DEF=$(echo "$EXISTING_TASK" | jq \
            --arg IMAGE "suneel717/medusa-store:latest" \
            --arg REDIS_URL "${{ secrets.REDIS_URL }}" \
            --arg DATABASE_URL "${{ secrets.DATABASE_URL }}" \
            --arg JWT_SECRET "${{ secrets.JWT_SECRET }}" \
            --arg COOKIE_SECRET "${{ secrets.COOKIE_SECRET }}" \
            '{
              family: .taskDefinition.family,
              executionRoleArn: .taskDefinition.executionRoleArn,
              networkMode: .taskDefinition.networkMode,
              requiresCompatibilities: .taskDefinition.requiresCompatibilities,
              cpu: .taskDefinition.cpu,
              memory: .taskDefinition.memory,
              containerDefinitions: [
                {
                  name: "medusa",
                  image: $IMAGE,
                  essential: true,
                  portMappings: [{
                    containerPort: 9000,
                    protocol: "tcp"
                  }],
                  environment: [
                    { name: "REDIS_URL", value: $REDIS_URL },
                    { name: "DATABASE_URL", value: $DATABASE_URL },
                    { name: "JWT_SECRET", value: $JWT_SECRET },
                    { name: "COOKIE_SECRET", value: $COOKIE_SECRET }
                  ]
                }
              ]
            }')

          echo "$NEW_TASK_DEF" > new-task-def.json

          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --region us-east-1 \
            --cli-input-json file://new-task-def.json \
            | jq -r '.taskDefinition.taskDefinitionArn')

          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      # Step 8: Update ECS service
      - name: Deploy ECS service
        run: |
          aws ecs update-service \
            --cluster medusa-cluster \
            --service medusa-service \
            --task-definition ${{ steps.update-task-def.outputs.task_definition_arn }} \
            --force-new-deployment \
            --region us-east-1

      # Step 9: Wait until service is stable
      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster medusa-cluster \
            --services medusa-service \
            --region us-east-1
